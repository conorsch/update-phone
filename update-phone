#!/usr/bin/perl
# quick script to grab newest video file from phone;
use strict;
use warnings;
use diagnostics;       # useful for debugging;
use feature 'say';     # beats print;
use Getopt::Long;      # for parsing command-line options;
use WWW::Mechanize;    # for reading web pages programmatically;
use Storable;          # for saving files found by WWW::Mechanize;
use Adb;               # for OO-style interaction with Android SDK's adb;
$|++;                  # disable readline buffering for real-time output;

my $total_size = 0;    # initialize counter for progressbar to report download percentage;
my $download_progress = 0;    # initialize counter for progressbar to report download percentage;

my $usage = <<'END';
update-phone

Downloads the newest CyanogenMod nightly and flashes an 
Android device with it, using the adb tool in the Android SDK.
Defaults to 'maguro' device type (Galaxy Nexus), and the most 
recent nightly.

Requires that the 'adb' executable be present in $PATH, although 
you can use the 

Usage: 

     update-phone -d mako -t stable     # downloads latest stable build for 'mako' platform (Nexus 4)
     update-phone --verbose             # does it all, chattily
     update-phone --help                # show this usage information

Supported options:

    -b, --build         # version of CyanogenMod (not yet implemented)
    -d, --device        # device category for CyanogenMod image (e.g. 'maguro' => 'Galaxy Nexus GSM')
    -p, --platform      # alias for --device
    -t, --type          # channel to pull image from, e.g. 'stable' or 'nightly'
    -f, --filename      # name for downloaded file (default is a string like 'cm-<BUILD>-<DATE>-NIGHTLY-<DEVICE>.zip')
    -h, --help          # show this usage information
    -v, --verbose       # enable chatty output
END

GetOptions(
    'device|d|platform|p' => \my $device,
    'filename|f'          => \my $filename,
    'build|b'             => \my $build,
    'type|t'              => \my $type,
    'help|h|?|usage'      => \my $help,
    'verbose|v'           => \my $verbose,
) or die "$usage";

say $usage and exit if $help;    # display usage information;

$device = 'mako'   unless $device;
$type   = 'stable' unless $type;
$verbose = 1;                    # debugging;

my $adb = Adb->new;
$adb->start;
$adb->devices;

#$adb->reboot( 'recovery' );

my $package = download();
$adb->sideload( $package ) or die "Sideloading failed.";
$adb->stop;

sub download {    # go grab that file;

    my $start = "http://download.cyanogenmod.com/?device=$device&type=$type";

    my $mech = WWW::Mechanize->new( autocheck => 1 );
    print "Looking up latest CyanogenMod nightly for $device platform... " if $verbose;    # chatty output;
    $mech->get( $start );                                                                  #
    say "done." if $verbose;                                                               # chatty output;

    $mech->content =~ m/md5sum: (\w{32})/g;                                                # find MD5 for checking;
    my $md5sum = $1;                                                                       # store matched MD5 sum;

    my ( $zip ) = $mech->find_all_links(                                                   # first link on page is most recent, so catch [0]
        url_regex => qr/$device\.zip$/,                                                    # look for URL ending in device name and .zip;
    );
    my $zip_url = $zip->url_abs;                                                           # expand to absolute URL;
    say "Fetching image at $zip_url" if $verbose;                                              # chatty output;

    $filename = ( split( /\//, $zip_url ) )[ -1 ]                                          # grab name of zipped image file by splitting on URL's /s;
      unless $filename;                                                                    # don't clobber a user-specified filename;

    # report success if file already exists locally, and passed MD5 checksum;
    return 1 if -e $filename and system( 'checkmd5', $md5sum, $filename ) == 0;            # check for pre-existing valid file;

    # continue with download if file exists, but doesn't pass checksum;
    unlink $filename if -e $filename;                                                      # clobber any previous version;

    open( DOWNLOAD, ">$filename" ) or die "$!";                                         # open filehandle to write content stream;

    $mech->get( $zip_url );    # go grab that url;
#    $mech->get( $zip_url, ':content_cb' => \&progressbar_cb );    # go grab that url;
    $mech->save_content( $filename );                             # download that file;

    say "Verifying file integrity (md5sum: $md5sum)..." if $verbose;    # chatty output;
    system( 'checkmd5', $md5sum, $filename ) == 0 or return;            # make sure the file is what it should be before we flash;
    return $filename;                                                   # pass back filename to caller;
}

sub progressbar_cb {

    # display precentage of total download for URL;
    my ( $data, $response, $proto ) = @_;
    print DOWNLOAD "$data";                                            # write data to file
    $download_progress += length( $data );
    $total_size = $response->header( 'Content-Length' );
    say floor( ( $download_progress / $total_size ) * 100 ), "% downloaded";    # print percent downloaded
}
